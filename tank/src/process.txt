1:对游戏的窗口进行初始化·设置标题，大小，坐标，窗口事件的监听
2:游戏菜单的显示，按键的控制

游戏被分成了若干个状态：游戏菜单，游戏帮助，游戏关于，游戏中，游戏结束
不同状态下绘制不同内容，按键有不同的处理方式
3:调整整个游戏窗口的重绘机制
单独启用一个线程用于窗口重绘
4:坦克的定义和绘制，坦克的四方向行走以及边界的控制
5:坦克发射子弹
6：解决屏幕闪烁问题——双缓冲
7：子弹的效率问题
解决方案：提前创建好若干个子弹对象，放到一个容器中。需要的时候从对象池中拿一个出来使用，
当子弹需要被销毁的时候，放回到原来的对象池中。（反复创建并销毁，使用对象池）

8：敌人坦克的控制
(1)随机在两个地方产生坦克
(2)调整tank类  父类：Tank 子类：MyTank， EnemyTank
(3)敌人坦克AI：每隔5s让敌人坦克随机获得一个状态（站立、行走）
然后敌人发射子弹的AI：游戏的每一帧都随机（5%）判断敌人是否发射子弹

9:动态获得屏幕的宽高，添加爆炸效果，爆炸效果的控制

10：适用对象池来处理爆炸对象

11:绘制名字，血条

12:敌人坦克使用了对象池处理

13:自己坦克死亡后的处理，游戏结束，选择——退出 或 开始新游戏
重置游戏数据，开始新游戏

14：地图  地图元素类
设计：上左右，距离窗口的宽度为1.5倍宽度
实现地图的绘制

15：优化地图初始化，子弹和地图碰撞

16：优化地图，设置不同类型的地图块
通过算法生成有规律的地图块

17：坦克类型设置

18：设计关卡
（1）敌人坦克的数量
（2）使用简单文本来实现关卡设计
（3）解析关卡
（4）根据敌人关卡的类型去创建敌人
（5）设置关卡游戏难度

19：添加了游戏信息类，获得了所有关卡的数量。游戏通关的判断

20：尝试添加音乐和音效

21：过关的判断//TODO

对象池：单例模式
关卡：单例模式